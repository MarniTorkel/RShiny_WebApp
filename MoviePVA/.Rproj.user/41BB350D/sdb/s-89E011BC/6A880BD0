{
    "collab_server" : "",
    "contents" : "# ==========================================================\n# COMP5703 - IT CAPSTONE PROJECT - MOVIE VISUAL ANALYTICS\n# ==========================================================\n\nlibrary(NLP)\nlibrary(tm)\nlibrary(reshape2)\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(shiny)\nlibrary(data.table)\nlibrary(rsconnect)\nlibrary(sigma)\nlibrary(rgexf)\n#require(bit64)\n\ndataDir <- \"./data/\"\n\nimdb_raw <- read.csv(paste0(dataDir, \"movie_metadata.csv\"), na.strings=\"\", stringsAsFactors = FALSE)\n#imdb_raw <- read.csv('/Users/marnitorkel/Documents/COMP5703/Shiny/Project/MoviePVA/data/movie_metadata.csv', na.strings=\"\", stringsAsFactors = FALSE)\nimdb_clean <- na.omit(imdb_raw)\nimdb_data <- unique(imdb_clean)\n\noverview_list <- data.frame(imdb_data$director_name, imdb_data$actor_1_name, imdb_data$actor_2_name, imdb_data$actor_3_name, imdb_data$gross, imdb_data$genres, imdb_data$movie_title, imdb_data$plot_keywords, imdb_data$language, imdb_data$country, imdb_data$title_year, imdb_data$imdb_score)\nnames(overview_list) <- gsub(\"imdb_data.\", \"\", names(overview_list), fixed = TRUE)\n#overview_list <- c(\"Actors\", \"Directors\", \"Director Average Ratings\",\"Director Average Revenue\",\"Revenue in years\", \"IMDB Ratings\", \"Genres\", \"Title years\")\n\ngenres_list <- unique(as.data.frame(sort(unlist(strsplit(as.character(imdb_data$genres), split=\"\\\\|\"))), stringsAsFactors = FALSE))\nrownames(genres_list) <- NULL\ncolnames(genres_list) <- \"genre\"\n\ngetNL <- function(ratings, years, genre, gross) {\n  nl <- c()\n  minGross <- as.integer(gross[1] * 1000000)\n  maxGross <- as.integer(gross[2] * 1000000)\n  # Get dataset subset\n  actors_data <- subset(imdb_data, imdb_data$imdb_score >= ratings[1] &\n                          imdb_data$imdb_score <= ratings[2] &\n                          imdb_data$title_year >= years[1] &\n                          imdb_data$title_year <= years[2] &\n                          imdb_data$gross >= minGross &\n                          imdb_data$gross <= maxGross &\n                          imdb_data$language == \"English\")\n  if (!str_detect(genre, \"All\")) {\n    actors_data <- actors_data[grep(genre, actors_data$genres),]}\n  # Generate movies and actors data frame\n  actors_df <- data.frame(actors_data$movie_title, actors_data$actor_1_name, actors_data$actor_2_name, actors_data$actor_3_name)\n  # co-actors\n  co_actors_df <- melt(actors_df, id.vars = \"actors_data.movie_title\")\n  names(co_actors_df) <- c(\"movie_title\", \"a_num\", \"actor\")\n  actors_names <- as.data.frame(co_actors_df[,3], stringsAsFactors = FALSE)\n  actors_names <- unique(actors_names)\n  actors_names <- actors_names[ order(actors_names[,1]), ]\n  actors_id <- 0:(length(actors_names)-1)\n  # nodes\n  actors_nodes <- data.frame(actors_id, actors_names)\n  names(actors_nodes) <- c(\"id\", \"name\")\n  #actors_nodes$group <- rep(1,nrow(actors_nodes))\n  #actors_nodes$size <- rep(1,nrow(actors_nodes))\n  #links\n  rlinks <- co_actors_df[,c(1,3)]\n  names(rlinks) <- c(\"movie_title\", \"name\")\n  # change name column 2 to id as from actors_nodes\n  links_id <- data.frame(movie_title=rlinks$movie_title, id=actors_nodes[match(rlinks$name, actors_nodes$name), 1])\n  a_links <- merge(x=links_id, y=links_id, by=\"movie_title\")\n  a_links <- subset(a_links, a_links$id.x != a_links$id.y)\n  actors_links <- a_links[, c(2,3)]\n  # sort links\n  actors_links <- actors_links[ order(actors_links[,1], actors_links[,2]), ]\n  actors_links$values <- rep(1,nrow(actors_links))\n  actors_links <- aggregate(actors_links[,3], actors_links[,-3], sum)\n  actors_links <- actors_links[ order(actors_links[,1], actors_links[,2]), ]\n  names(actors_links) <- c(\"from\", \"to\", \"value\")\n  rownames(actors_links) <- NULL\n  nl$nodes <- actors_nodes\n  nl$links <- actors_links\n  return(nl)\n  \n}\n\ngetActor <- function(td_actor) {\n  # Get actor subset\n  td_data <- imdb_data[imdb_data$actor_1_name == td_actor |\n                         imdb_data$actor_2_name == td_actor |\n                         imdb_data$actor_3_name == td_actor , ]\n  \n  tda <- na.omit(data.frame(td_data$movie_title, td_data$director_name, td_data$actor_1_name, td_data$actor_2_name, td_data$actor_3_name, \n                         td_data$genres, td_data$title_year, td_data$imdb_score, td_data$gross, td_data$budget))\n  return(tda)\n  \n}\n\nactorList <- unique(data.frame(c(imdb_data$actor_1_name, imdb_data$actor_2_name, imdb_data$actor_3_name)))\ncolnames(actorList) <- \"name\"\nactorList <- data.frame(actorList[order(actorList$name),], stringsAsFactors = FALSE)\ncolnames(actorList) <- \"name\"\n",
    "created" : 1505698582343.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1492860782",
    "id" : "6A880BD0",
    "lastKnownWriteTime" : 1507370704,
    "last_content_update" : 1507370704635,
    "path" : "~/Documents/COMP5703/Shiny/Project/MoviePVA/Global.R",
    "project_path" : "Global.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}